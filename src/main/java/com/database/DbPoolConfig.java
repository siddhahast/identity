package com.database;

import org.apache.commons.dbcp.ConnectionFactory;

import java.util.Properties;

public class DbPoolConfig
{

    /**
     * Pool name
     * Must be a unique
     */
    private String poolName;

    /**
     * Connection string
     */
    private String connectionString;

    /**
     * User
     */
    private String user;

    /**
     * Password
     */
    private String password;

    /**
     * Query timeout in seconds
     * Default is 10 seconds
     * 0 seconds means no timeout
     */
    private int queryTimeoutSecs;

    /**
     * Pool will hold on to minSize connections even if they are not used
     * <p>
     * The minimum number of connections that can remain idle in the pool,
     * without extra ones being created, or zero to create none.
     * <p>
     * aka. minIdle
     */
    private int minSize;

    /**
     * The maximum number of active connections that can be allocated from this pool at the same time,
     * or negative for no limit.
     * <p>
     * aka. maxActive
     */
    private int maxSize;

    /**
     * The maximum number of connections that can remain idle in the pool,
     * without extra ones being released, or negative for no limit.
     * <p>
     * We want this number to be be the same as maxSize almost all the time
     */
    private int maxIdle;

    /**
     * The minimum number of connections that can remain idle in the pool,
     * without extra ones being created, or zero to create none.
     */
    private int minIdle;

    /**
     * The maximum number of millis that the pool will wait (when there are no available connections) for a connection to be
     * returned before throwing an exception, or -1 to wait indefinitely.
     */
    private int maxWaitMillis;

    /**
     * Initial size of the pool
     * This many connections will be allocated when pool is initialized
     * Param will be ignored until we user commons-pooling-1.2
     */
    private int initialSize;

    /**
     * The number of seconds to sleep between runs of the idle object evictor thread.
     * When non-positive, no idle object evictor thread will be run.
     * So the only way connection will be removed from pool is if they fail test
     * on borrow or return.
     * <p>
     * This config is in seconds, I will x1000 when setting on DBCP
     * default 1 minute
     */
    private int timeBetweenEvictionRunsMillis;

    /**
     * The minimum amount of time an object may sit idle in the pool
     * before it is eligible for eviction by the idle object evictor (if any).
     * <p>
     * This config is in seconds, I will x1000 when setting on DBCP
     * default 10 minutes
     */
    private int minEvictableIdleTimeMillis;

    /**
     * Sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any),
     * with the extra condition that at least "minIdle" amount of object remain in the pool.
     * <p>
     * This config is in seconds, I will x1000 when setting on DBCP
     * default 10 minutes
     */
    private int softMinEvictableIdleTimeMillis;

    /**
     * The number of objects to examine during
     * each run of the idle object evictor thread (if any).
     */
    private int testsPerEvictionRun;

    /**
     * Driver class name
     * Default is oracle.jdbc.driver.OracleDriver
     */
    private String driverClassName;

    /**
     * Caching pooling for prepared statements
     * By default 25 prepared statements will be cached for every connection
     */
    private int statementPoolSize;

    /**
     * Readable and writable
     */
    private boolean readOnly;

    /**
     * Commit after every statement
     */
    private boolean autoCommit;

    /**
     * Validation query must return at least 1 row
     */
    private String validationQuery;

    /**
     * Validation query must return at least 1 row
     */
    private int validationQueryTimeoutSecs;

    /**
     * Test the connection before its borrowed from the pool
     */
    private boolean testOnBorrow;

    /**
     * Test the connection before its returned to the pool
     */
    private boolean testOnReturn;

    /**
     * Test the connection while it is idle in the pool
     */
    private boolean testWhileIdle;

    /**
     * User as parameter to prepareStatement()
     */
    private int autoGeneratedKeys;

    /**
     * Connection factory class
     * responsible for creating new connections
     */
    private ConnectionFactory connectionFactory;

    /**
     *
     */
    private Properties properties;

    /**
     *
     */
    private Integer fetchSize;

    /**
     *
     */
    private Integer batchSize;

    private SQLExceptionHandler sqlExceptionHandler;

    public String getPoolName() {
        return poolName;
    }

    public void setPoolName(String poolName) {
        this.poolName = poolName;
    }

    public String getConnectionString() {
        return connectionString;
    }

    public void setConnectionString(String connectionString) {
        this.connectionString = connectionString;
    }

    public String getUser() {
        return user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public int getQueryTimeoutSecs() {
        return queryTimeoutSecs;
    }

    public void setQueryTimeoutSecs(int queryTimeoutSecs) {
        this.queryTimeoutSecs = queryTimeoutSecs;
    }

    public int getMinSize() {
        return minSize;
    }

    public void setMinSize(int minSize) {
        this.minSize = minSize;
    }

    public int getMaxSize() {
        return maxSize;
    }

    public void setMaxSize(int maxSize) {
        this.maxSize = maxSize;
    }

    public int getMaxIdle() {
        return maxIdle;
    }

    public void setMaxIdle(int maxIdle) {
        this.maxIdle = maxIdle;
    }

    public int getMinIdle() {
        return minIdle;
    }

    public void setMinIdle(int minIdle) {
        this.minIdle = minIdle;
    }

    public int getMaxWaitMillis() {
        return maxWaitMillis;
    }

    public void setMaxWaitMillis(int maxWaitMillis) {
        this.maxWaitMillis = maxWaitMillis;
    }

    public int getInitialSize() {
        return initialSize;
    }

    public void setInitialSize(int initialSize) {
        this.initialSize = initialSize;
    }

    public int getTimeBetweenEvictionRunsMillis() {
        return timeBetweenEvictionRunsMillis;
    }

    public void setTimeBetweenEvictionRunsMillis(int timeBetweenEvictionRunsMillis) {
        this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
    }

    public int getMinEvictableIdleTimeMillis() {
        return minEvictableIdleTimeMillis;
    }

    public void setMinEvictableIdleTimeMillis(int minEvictableIdleTimeMillis) {
        this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
    }

    public int getSoftMinEvictableIdleTimeMillis() {
        return softMinEvictableIdleTimeMillis;
    }

    public void setSoftMinEvictableIdleTimeMillis(int softMinEvictableIdleTimeMillis) {
        this.softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;
    }

    public int getTestsPerEvictionRun() {
        return testsPerEvictionRun;
    }

    public void setTestsPerEvictionRun(int testsPerEvictionRun) {
        this.testsPerEvictionRun = testsPerEvictionRun;
    }

    public String getDriverClassName() {
        return driverClassName;
    }

    public void setDriverClassName(String driverClassName) {
        this.driverClassName = driverClassName;
    }

    public int getStatementPoolSize() {
        return statementPoolSize;
    }

    public void setStatementPoolSize(int statementPoolSize) {
        this.statementPoolSize = statementPoolSize;
    }

    public boolean isReadOnly() {
        return readOnly;
    }

    public void setReadOnly(boolean readOnly) {
        this.readOnly = readOnly;
    }

    public boolean isAutoCommit() {
        return autoCommit;
    }

    public void setAutoCommit(boolean autoCommit) {
        this.autoCommit = autoCommit;
    }

    public String getValidationQuery() {
        return validationQuery;
    }

    public void setValidationQuery(String validationQuery) {
        this.validationQuery = validationQuery;
    }

    public int getValidationQueryTimeoutSecs() {
        return validationQueryTimeoutSecs;
    }

    public void setValidationQueryTimeoutSecs(int validationQueryTimeoutSecs) {
        this.validationQueryTimeoutSecs = validationQueryTimeoutSecs;
    }

    public boolean isTestOnBorrow() {
        return testOnBorrow;
    }

    public void setTestOnBorrow(boolean testOnBorrow) {
        this.testOnBorrow = testOnBorrow;
    }

    public boolean isTestOnReturn() {
        return testOnReturn;
    }

    public void setTestOnReturn(boolean testOnReturn) {
        this.testOnReturn = testOnReturn;
    }

    public boolean isTestWhileIdle() {
        return testWhileIdle;
    }

    public void setTestWhileIdle(boolean testWhileIdle) {
        this.testWhileIdle = testWhileIdle;
    }

    public int getAutoGeneratedKeys() {
        return autoGeneratedKeys;
    }

    public void setAutoGeneratedKeys(int autoGeneratedKeys) {
        this.autoGeneratedKeys = autoGeneratedKeys;
    }

    public ConnectionFactory getConnectionFactory() {
        return connectionFactory;
    }

    public void setConnectionFactory(ConnectionFactory connectionFactory) {
        this.connectionFactory = connectionFactory;
    }

    public Properties getProperties() {
        return properties;
    }

    public void setProperties(Properties properties) {
        this.properties = properties;
    }

    public Integer getFetchSize() {
        return fetchSize;
    }

    public void setFetchSize(Integer fetchSize) {
        this.fetchSize = fetchSize;
    }

    public Integer getBatchSize() {
        return batchSize;
    }

    public void setBatchSize(Integer batchSize) {
        this.batchSize = batchSize;
    }

    public SQLExceptionHandler getSqlExceptionHandler() {
        return sqlExceptionHandler;
    }

    public void setSqlExceptionHandler(SQLExceptionHandler sqlExceptionHandler) {
        this.sqlExceptionHandler = sqlExceptionHandler;
    }
}
